local wk = require("which-key")
wk.add(
  {
    { "<C-k>",     "<cmd>lua vim.lsp.buf.signature_help()<cr>",                    desc = "LSP Signature help" },
    { "<K>",       "<cmd>lua vim.lsp.buf.hover()<cr>",                             desc = "LSP Hover" },
    { "<leader>.", "<cmd>lua require('fzf-lua').tags_live_grep()<cr>",             desc = "Find by tag" },
    { "<leader>f", "<cmd>lua require('fzf-lua').buffers()<cr>",                    desc = "Show buffers" },
    { "<leader>g", "<cmd>lua require('fzf-lua').live_grep()<cr>",                  desc = "Live grep" },
    { "<leader>l", "<cmd>set invlist<cr>",                                         desc = "Show hidden symbols" },
    { "<leader>p", "<cmd>lua require('fzf-lua').files()<cr>",                      desc = "Find File" },
    { "<leader>v", "<cmd>vsplit<cr>",                                              desc = "Split vertically" },
    { "<leader>w", "<c-w><c-w>",                                                   desc = "Switch windows" },
    { "<leader>b", "<cmd>GDBreak<cr>",                                             desc = "Set gdb breakpoint" },
    { "<leader>x", "<cmd>GDBreakClear<cr>",                                        desc = "Clear gdb breakpoints" },
    { "<space>c",  group = "LSP Code Actions" },
    { "<space>ca", "<cmd>lua vim.lsp.buf.code_action()<cr>",                       desc = "Code Action" },
    { "<space>cr", "<cmd>lua vim.lsp.buf.rename()<cr>",                            desc = "Rename" },
    { "<space>d",  group = "Diagnostic" },
    { "<space>df", "<cmd>lua vim.diagnostic.open_float()<cr>",                     desc = "Diagnostic: open floating window" },
    { "<space>dl", "<cmd>lua vim.diagnostic.setloclist()<cr>",                     desc = "Diagnostic: set location list" },
    { "<space>dn", "<cmd>lua vim.diagnostic.goto_next()<cr>",                      desc = "Diagnostic: next" },
    { "<space>dp", "<cmd>lua vim.diagnostic.goto_prev()<cr>",                      desc = "Diagnostic: previous" },
    { "<space>f",  "<cmd>lua vim.lsp.buf.format({async = true })<cr>",             desc = "LSP Format",                      mode = 'n' },
    { "<space>f",  "<cmd>lua vim.lsp.buf.format({async = true })<cr>",             desc = "LSP Format Selected",             mode = "v" },
    { "<leader>]", "<cmd>Notes<cr>",                                               desc = "Notes" },
    { "<f20>",     "<cmd>Notes<cr>",                                               desc = "Notes" },
    { "gc",        "<cmd>lua require('fzf-lua').lsp_incoming_calls()<cr>",         desc = "LSP Incoming calls" },
    { "gd",        "<cmd>lua require('fzf-lua').lsp_definitions()<cr>",            desc = "LSP Definitions" },
    { "gi",        "<cmd>lua require('fzf-lua').lsp_implementations()<cr>",        desc = "LSP Implementations" },
    { "go",        "<cmd>lua require('fzf-lua').lsp_outgoing_calls()<cr>",         desc = "LSP Outgoing calls" },
    { "gr",        "<cmd>lua require('fzf-lua').lsp_references()<cr>",             desc = "LSP References" },
    { "gs",        "<cmd>lua require('fzf-lua').lsp_live_workspace_symbols()<cr>", desc = "LSP Workspace symbols" },
    { "gt",        "<cmd>lua require('fzf-lua').lsp_typedefs()<cr>",               desc = "LSP Type definitions" },
  }
)
